<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tsx" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Runtime.Serialization" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.Serialization.Json" #>
<#@ include file="InterfaceGen.ttinclude" #>

<#
    var jsonData = JsonData.ReadJsonData();
#>

export class TabData 
{
<#
    foreach (var tab in jsonData.tabs)
    {
        var className = GetSettingClassName(tab.tabName);
#>
    public <#= tab.tabName #> : <#= className #> = new <#= className #>;
<#
    }
#>

}

<#
    foreach (var tab in jsonData.tabs)
    {
        var className = GetSettingClassName(tab.tabName);
#>

class <#= className #>
{

<#
        foreach (var tabItem in tab.data)
        {
#>
    public <#= tabItem.name #>:<#= tabItem.type #> = 0;
<#
        }
#>

}

<#
    }
#>

<#
    foreach (var tab in jsonData.tabs)
    {
        var tabName = GetSettingTabName(tab.tabName);
#>

export function <#= tabName #>(props:any) {
    return (
<#
        foreach (var tabItem in tab.data)
        {
            var nameSpace = tabName;
            var settingName = tabItem.name;
            switch (tabItem.type)
            {
                default:
#>
            <SettingsSlider nameSpace="<#= nameSpace #>" name="<#= settingName #>" label={[ "<#= settingName #>", <br/>, "<#= nameSpace #>"]} icon={<VolumeUp/>} initialValue={settingValue} step={0.4} min={10} max={110} handleChange={handleSettingChange}/>
<#
                    break;
            }
#>

<#
        }
#>
    );
}

<#
    }
#>


<#+

    string GetSettingClassName(string name)
    {
        return name + "Settings";
    }

    string GetSettingTabName(string name)
    {
        return name.Substring(0, 1).ToUpper() + name.Substring(1) + "SettingsTab";
    }

/*

class UIData {
    public CharDatas: Array<CharData> = [
        {Name: "Kalmox", Health: 0.7},
        {Name: "", Health: 0 },
        {Name: "KyleBot", Health: 0.7},
        {Name: "KyleBot", Health: 0.7}
    ];
    public MatchData: MatchData = new MatchData();
}

class CharData {
    public Name:string = "";
    public Health:number = 0.70;
}


*/
#>
